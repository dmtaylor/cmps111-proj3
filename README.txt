README

Project 3

By: Forrest Kerslager
    Nick Noto
    David Taylor
    Kevin Yeap
    Connie Yu

########################################################################
                            File Listing
########################################################################

hashset.c
hashset.h
meminfo.c
meminfo.h
meminfo_hash.c
meminfo_hash.h
slug_mem.c
slug_mem.h

/tests
    test1.c
    test2.c
    test3.c
    test4.c
    test5.c
    test6.c
    test7.c
    test8.c
    test9.c

README.txt
design.pdf

########################################################################
                            Build Instructions
########################################################################

To include the slug_memory suite into a given program, include

                            slug_mem.h

into whatever project you're building, and compile the following files
with your existing project.

                            hashset.c
                            meminfo.c
                            meminfo_hash.c
                            slug_mem.c
                            
To make use of the included Makefile, modify the labels at the top
to be the C source files for your project, the target object files
for your program, and the build target for your project. The make
target "all" will then attempt to compile the .c files specified with
slug memory and create the specified target.

########################################################################
                                Testing
########################################################################

Test files have been included in the distribution. These tests run the
gamut of memory usages. Feel free to use them by specifying them in the
Makefile.

########################################################################
                            Production Notes
########################################################################
=========
Features
=========
- Returns a warning on zero byte allocations
- Returns an error and terminates on >128MB allocations
- Returns out of memory error generated by malloc() and terminates
- Returns an error and terminates if the first byte of an allocation is 
	not passed to free()*
- Returns an error and terminates if a memory block that was never 
	allocated is passed to free()*
- Returns an error and terminates if a freed block is passed to free()*
- If an allocation is made an exit handler will print any unfreed memory 
	and statistics on all allocations.
- If memory is left unfreed on a programs exit it will report every 
	allocation.

* Note: The program does not differentiate between errors for freeing 
		previously freed, unallocated and pointers to memory inside an 
		allocation.

=====================
Zero Byte Allocation
=====================
When slug_malloc() is passed zero as the size of memory to allocate it 
will print out a warning but will not terminate. However, when you pass
size zero into malloc() it does not allocate memory but returns NULL. 
Our program already catches the NULL to check for out of memory errors.
To emulate malloc() and prevent terminating on zero byte allocations we 
will skip calling malloc() and adding an allocation to the hashset when 
the user asks for a block size of zero. However, the allocation will 
still be recorded for calculating statistics.

===========================
When Malloc() returns NULL
===========================
When malloc() cannot allocate memory possibly due to an out of memory 
error it returns a NULL pointer. Normally a user should check for this 
error by asserting after every malloc. We made the decision to catch 
this error and terminate for the user in case they are not checking 
themselves.

==========================
Hashtable Implementation
==========================
The hashtable implementation(hashset.h hashset.c) is from one of our 
group member's previous projects in CMPS 12b. It has been altered 
to fit out needs.
